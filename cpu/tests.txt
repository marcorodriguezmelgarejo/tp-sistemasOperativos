// FETCH
int main(){
    crear_logger();

    pcb.program_counter = 0;
    pcb.lista_instrucciones = malloc(MAX_INSTRUCCION_SIZE*50+1);
    strcpy(pcb.lista_instrucciones, "I/O 3000\nREAD 0\nWRITE 4 42\nNO_OP\nNO_OP\nCOPY 0 4\nEXIT\n");
    char instruccion_string[MAX_INSTRUCCION_SIZE];

    fetch(instruccion_string);

    log_debug(logger, "Instruccion: %s, PC: %d", instruccion_string, pcb.program_counter);

    fetch(instruccion_string);

    log_debug(logger, "Instruccion: %s, PC: %d", instruccion_string, pcb.program_counter);
}

// DECODE
int main(){     // prueba de decode()
    crear_logger();

    char* string_instruccion = malloc(MAX_INSTRUCCION_SIZE);
    int tamanio_instruccion = MAX_INSTRUCCION_SIZE;
    instruccion_t instruccion;
    operacion_t operacion;

    while(1){
        getline(&string_instruccion, &tamanio_instruccion, stdin);
        instruccion = decode(string_instruccion);
        printf("Codigo operacion: %d\n", instruccion.operacion);
       	switch(instruccion.operacion){
            case INVALIDA:
                break;
	    	case NO_OP:
			    break;
		    case EXIT:
			    break;
		    case I_O:
                printf("Tiempo bloqueo: %d\n", instruccion.tiempo_bloqueo);
			    break;
		    case READ:
                printf("Dir origen: %d\n", instruccion.dir_origen);
			    break;
		    case WRITE:
                printf("Dir destino: %d\n", instruccion.dir_destino);
	    		break;
    		case COPY:
                printf("Dir destino: %d\n", instruccion.dir_destino);
                printf("Dir origen: %d\n", instruccion.dir_origen);
			    break;
	    }
    }
    free(string_instruccion);
    return 0;
} 